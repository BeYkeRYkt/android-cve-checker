#!/usr/bin/env python3

import getopt
import os
import sys

# to query CVE list from Lineage tracker
import json
try:
    import requests
except ImportError:
    print("[E] 'requests' module not installed")
    print("[E] run 'pip[3] install requests' to get it")
    sys.exit()


def parse_patches_from_tracker():

    patches = []
    URL = "https://cve.lineageos.org/api/cves"

    response = requests.get(URL)

    for key in response.json():
        patches.append(key)

    return patches


def find_missing_patches(patches, patches_dir):

    missing_patches = {}

    subdirs = [node for node in os.listdir(patches_dir)
               if os.path.isdir(os.path.join(patches_dir, node))]

    for subdir in subdirs:
        missing = []
        for patch in patches:
            patch_path = os.path.abspath(os.path.join(patches_dir, subdir,
                                                      patch + ".patch"))
            if not os.path.isfile(patch_path):
                missing.append(patch)
        missing_patches[subdir] = missing

    return missing_patches


"""
Print usage information about this program.
"""


def print_usage():

    print("usage: check_patches.py <OPTIONS> patches_dir")


def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "h", ["help"])
    except getopt.GetoptError as err:
        # print help information and exit
        print(str(err))
        print_usage()
        sys.exit(2)

    # check for required args
    if len(sys.argv) != 2:
        print("[E] Invalid number of args (required: 2, found: "
              + str(len(sys.argv)) + ")!")
        print_usage()
        sys.exit(2)

    # directory containing the git patchfiles
    patches_dir = sys.argv[-1]

    for o, a in opts:
        if o in ("-h", "--help"):
            print_usage()
            sys.exit()
        else:
            print("[E] unhandled option: " + o)
            sys.exit(2)

    if not patches_dir or not os.path.isdir(patches_dir):
        print("[E] invalid patchfile directory: " + patches_dir)
        return

    # query CVE list from Lineage tracker
    patches = parse_patches_from_tracker()
    missing_patches = find_missing_patches(patches, patches_dir)

    print("missing patchfiles:\n")
    for subdir in missing_patches:
        print(subdir)
        for patch in missing_patches[subdir]:
            print("\t" + patch)
        print("")


if __name__ == "__main__":
    main()
