From a605afaa9a88aebd85995e68d6ed22fe3fdfedad Mon Sep 17 00:00:00 2001
From: Aditya Bavanari <abavanar@codeaurora.org>
Date: Wed, 21 Feb 2018 17:02:18 +0530
Subject: [PATCH] asoc: msm: add check for integer overflow

Add check for integer overflow of user
supplied data for ADSP stream command.

CRs-Fixed: 2173850
Bug: 71363804
Change-Id: Ic70093e890b7a6dd07529d77d10fff003282a8ea
Signed-off-by: Aditya Bavanari <abavanar@codeaurora.org>
---
 sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c | 12 +++++++++++-
 sound/soc/msm/qdsp6v2/msm-pcm-q6-v2.c      | 16 ++++++++++++++--
 sound/soc/msm/qdsp6v2/q6asm.c              | 14 ++++++++++++--
 3 files changed, 37 insertions(+), 5 deletions(-)

diff --git a/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c b/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c
index 216927b007458..566d18405df05 100644
--- a/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c
+++ b/sound/soc/msm/qdsp6v2/msm-compress-q6-v2.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2017, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -3604,6 +3604,7 @@ static int msm_compr_adsp_stream_cmd_put(struct snd_kcontrol *kcontrol,
 	struct snd_compr_stream *cstream = NULL;
 	struct msm_compr_audio *prtd;
 	int ret = 0, param_length = 0;
+	uint64_t actual_payload_len = 0;
 
 	if (fe_id >= MSM_FRONTEND_DAI_MAX) {
 		pr_err("%s Received invalid fe_id %lu\n",
@@ -3634,6 +3635,15 @@ static int msm_compr_adsp_stream_cmd_put(struct snd_kcontrol *kcontrol,
 
 	memcpy(&param_length, ucontrol->value.bytes.data,
 		sizeof(param_length));
+
+	actual_payload_len = param_length + sizeof(param_length);
+	if (actual_payload_len > U32_MAX) {
+		pr_err("%s param length=0x%X exceeds limit",
+				__func__, param_length);
+		ret = -EINVAL;
+		goto done;
+	}
+
 	if ((param_length + sizeof(param_length))
 		>= sizeof(ucontrol->value.bytes.data)) {
 		pr_err("%s param length=%d  exceeds limit",
diff --git a/sound/soc/msm/qdsp6v2/msm-pcm-q6-v2.c b/sound/soc/msm/qdsp6v2/msm-pcm-q6-v2.c
index d0888ce9ed9f4..7f6dd520ce90e 100644
--- a/sound/soc/msm/qdsp6v2/msm-pcm-q6-v2.c
+++ b/sound/soc/msm/qdsp6v2/msm-pcm-q6-v2.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2012-2017, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2012-2018, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -1101,7 +1101,9 @@ static int msm_pcm_adsp_stream_cmd_put(struct snd_kcontrol *kcontrol,
 	struct msm_plat_data *pdata = dev_get_drvdata(platform->dev);
 	struct snd_pcm_substream *substream;
 	struct msm_audio *prtd;
-	int ret = 0, param_length = 0;
+	int ret = 0;
+	uint32_t param_length = 0;
+	uint64_t actual_payload_len = 0;
 
 	if (!pdata) {
 		pr_err("%s pdata is NULL\n", __func__);
@@ -1131,6 +1133,16 @@ static int msm_pcm_adsp_stream_cmd_put(struct snd_kcontrol *kcontrol,
 
 	memcpy(&param_length, ucontrol->value.bytes.data,
 		sizeof(param_length));
+
+	actual_payload_len = param_length + sizeof(param_length);
+
+	if (actual_payload_len > U32_MAX) {
+		pr_err("%s param length=0x%X exceeds limit",
+		__func__, param_length);
+		ret = -EINVAL;
+		goto done;
+	}
+
 	if ((param_length + sizeof(param_length))
 		>= sizeof(ucontrol->value.bytes.data)) {
 		pr_err("%s param length=%d  exceeds limit",
diff --git a/sound/soc/msm/qdsp6v2/q6asm.c b/sound/soc/msm/qdsp6v2/q6asm.c
index 129053e19cf51..6426e0b365eb1 100644
--- a/sound/soc/msm/qdsp6v2/q6asm.c
+++ b/sound/soc/msm/qdsp6v2/q6asm.c
@@ -1099,7 +1099,9 @@ int q6asm_send_stream_cmd(struct audio_client *ac, uint32_t opcode,
 {
 	char *asm_params = NULL;
 	struct apr_hdr hdr;
-	int sz, rc;
+	int rc;
+	uint32_t sz = 0;
+	uint64_t actual_sz = 0;
 
 	if (!param || !ac) {
 		pr_err("%s: %s is NULL\n", __func__,
@@ -1108,7 +1110,15 @@ int q6asm_send_stream_cmd(struct audio_client *ac, uint32_t opcode,
 		goto done;
 	}
 
-	sz = sizeof(struct apr_hdr) + params_length;
+	actual_sz = sizeof(struct apr_hdr) + params_length;
+	if (actual_sz > U32_MAX) {
+		pr_err("%s: payload size 0x%X exceeds limit\n",
+			__func__, params_length);
+		rc = -EINVAL;
+		goto done;
+	}
+
+	sz = (uint32_t)actual_sz;
 	asm_params = kzalloc(sz, GFP_KERNEL);
 	if (!asm_params) {
 		rc = -ENOMEM;
