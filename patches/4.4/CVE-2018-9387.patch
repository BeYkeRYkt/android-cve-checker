From f8a54dde0c0cd31ca363878165a969324e48a4ef Mon Sep 17 00:00:00 2001
From: Arnd Geis <arndg@google.com>
Date: Wed, 29 Nov 2017 16:59:33 -0800
Subject: [PATCH] misc: mnh: range checks, serialized ioctl

1. add range check for update slot (b/69474744)
2. add size check for update slot size (b/69006385)
3. serialize IOCTLs for firmware update (b/69006799)

b/69474744
b/69006385
b/69006799

Bug: 69006799
Change-Id: Ic23ccdc8a7b6738622abc7872179eb69771b49a9
Signed-off-by: Arnd Geis <arndg@google.com>
---
 drivers/misc/mnh/mnh-sm.c | 23 +++++++++++++++++++++--
 1 file changed, 21 insertions(+), 2 deletions(-)

diff --git a/drivers/misc/mnh/mnh-sm.c b/drivers/misc/mnh/mnh-sm.c
index ff8042cb073c2..52379059525e1 100644
--- a/drivers/misc/mnh/mnh-sm.c
+++ b/drivers/misc/mnh/mnh-sm.c
@@ -203,6 +203,9 @@ struct mnh_sm_device {
 
 	/* firmware version */
 	char mnh_fw_ver[FW_VER_SIZE];
+
+	/* serialize fw update requests */
+	struct mutex fw_update_lock;
 };
 
 static struct mnh_sm_device *mnh_sm_dev;
@@ -840,9 +843,17 @@ int mnh_validate_update_buf(struct mnh_update_configs configs)
 	for (i = 0; i < MAX_NR_MNH_FW_SLOTS; i++) {
 		config = configs.config[i];
 		slot = config.slot_type;
+		if ((slot < 0) || (slot >= MAX_NR_MNH_FW_SLOTS))
+			return -EINVAL;
+
+		if (!((config.size > 0) &&
+		     (config.size < MNH_ION_BUFFER_SIZE) &&
+		     (config.offset >= 0) &&
+		     (config.offset < (MNH_ION_BUFFER_SIZE - config.size))))
+			return -EINVAL;
+
 		/* only configure slots masked by FW_SLOT_UPDATE_MASK */
-		if ((FW_SLOT_UPDATE_MASK & (1 << slot)) &&
-		    (config.size > 0)) {
+		if (FW_SLOT_UPDATE_MASK & (1 << slot)) {
 			mnh_sm_dev->ion[fw_idx]->fw_array[slot].ap_offs =
 				config.offset;
 			mnh_sm_dev->ion[fw_idx]->fw_array[slot].size =
@@ -1977,6 +1988,7 @@ static long mnh_sm_ioctl(struct file *file, unsigned int cmd,
 			mnh_mipi_stop(mnh_sm_dev->dev, mipi_config);
 		break;
 	case MNH_SM_IOC_GET_UPDATE_BUF:
+		mutex_lock(&mnh_sm_dev->fw_update_lock);
 		mnh_sm_dev->ion[FW_PART_SEC]->is_fw_ready = false;
 		if (mnh_sm_dev->ion[FW_PART_SEC]) {
 			if (mnh_ion_create_buffer(mnh_sm_dev->ion[FW_PART_SEC],
@@ -1995,17 +2007,21 @@ static long mnh_sm_ioctl(struct file *file, unsigned int cmd,
 			dev_err(mnh_sm_dev->dev,
 				"%s: failed to copy to userspace (%d)\n",
 				__func__, err);
+			mutex_unlock(&mnh_sm_dev->fw_update_lock);
 			return err;
 		}
 		mnh_sm_dev->update_status = FW_UPD_INIT;
+		mutex_unlock(&mnh_sm_dev->fw_update_lock);
 		break;
 	case MNH_SM_IOC_POST_UPDATE_BUF:
+		mutex_lock(&mnh_sm_dev->fw_update_lock);
 		err = copy_from_user(&update_configs, (void __user *)arg,
 				     sizeof(update_configs));
 		if (err) {
 			dev_err(mnh_sm_dev->dev,
 				"%s: failed to copy from userspace (%d)\n",
 				__func__, err);
+			mutex_unlock(&mnh_sm_dev->fw_update_lock);
 			return err;
 		}
 		if (mnh_sm_dev->update_status == FW_UPD_INIT) {
@@ -2018,10 +2034,12 @@ static long mnh_sm_ioctl(struct file *file, unsigned int cmd,
 				dev_err(mnh_sm_dev->dev,
 					"%s: failed to validate slots (%d)\n",
 					__func__, err);
+				mutex_unlock(&mnh_sm_dev->fw_update_lock);
 				return err;
 			}
 			mnh_sm_dev->update_status = FW_UPD_VERIFIED;
 		}
+		mutex_unlock(&mnh_sm_dev->fw_update_lock);
 		break;
 	case MNH_SM_IOC_GET_FW_VER:
 		err = copy_to_user((void __user *)arg, &mnh_sm_dev->mnh_fw_ver,
@@ -2144,6 +2162,7 @@ static int mnh_sm_probe(struct platform_device *pdev)
 
 	/* initialize driver structures */
 	mutex_init(&mnh_sm_dev->lock);
+	mutex_init(&mnh_sm_dev->fw_update_lock);
 	init_completion(&mnh_sm_dev->powered_complete);
 	init_completion(&mnh_sm_dev->work_complete);
 	init_completion(&mnh_sm_dev->suspend_complete);
