#!/usr/bin/env python3

import getopt
import os
import sys

# to query CVE list from Lineage tracker
import json
try:
    import requests
except ImportError:
    print("[E] 'requests' module not installed")
    print("[E] run 'pip[3] install requests' to get it")
    sys.exit()

from cve import CveWrapper


def load_tracker_cves():

    cves = []
    URL = "https://cve.lineageos.org/api/cves"

    response = requests.get(URL)

    for key in response.json():
        cves.append(key)

    return cves


def load_local_cves(path):

    cves = {}
    patch_prefix = "CVE-"

    for k_version in os.listdir(path):
        for node in os.listdir(os.path.join(path, k_version)):
            if node.startswith(patch_prefix):
                cve_name = node[:node.rfind('.')]
                multipart_index = cve_name.rfind('_')
                if multipart_index != -1:
                    cve_name = cve_name[:cve_name.rfind('_')]
                if cve_name in cves:
                    # we already have this CVE
                    continue

                cve_object = CveWrapper.CveWrapper(cve_name, path)
                cves[cve_name] = cve_object

    return cves


"""
Print usage information about this program.
"""


def print_usage():

    print("usage: check_patches.py <OPTIONS> patches_dir")


def main():

    try:
        opts, args = getopt.getopt(sys.argv[1:], "h", ["help"])
    except getopt.GetoptError as err:
        # print help information and exit
        print(str(err))
        print_usage()
        sys.exit(2)

    # check for required args
    if len(sys.argv) != 2:
        print("[E] Invalid number of args (required: 2, found: "
              + str(len(sys.argv)) + ")!")
        print_usage()
        sys.exit(2)

    # directory containing the git patchfiles
    patches_dir = sys.argv[-1]

    for o, a in opts:
        if o in ("-h", "--help"):
            print_usage()
            sys.exit()
        else:
            print("[E] unhandled option: " + o)
            sys.exit(2)

    if not patches_dir or not os.path.isdir(patches_dir):
        print("[E] invalid patchfile directory: " + patches_dir)
        return

    # load our local CVE patchfiles
    local_cves = load_local_cves(patches_dir)

    # query CVE list from Lineage tracker
    tracker_cve_names = load_tracker_cves()

    # find missing CVEs
    print("missing CVEs for this tool:\n")
    for cve_name in tracker_cve_names:
        if cve_name not in local_cves:
            print("\t" + cve_name)
    print("\n")

    print("missing CVEs in the tracker:\n")
    for cve in local_cves:
        if not cve in tracker_cve_names:
            print("\t" + cve)


if __name__ == "__main__":
    main()
